1.tornadosum基本操作
	from tornado.httpserver import HTTPServer
	from tornado.ioloop import IOLoop
	from tornado.options import define, parse_config_file, options
	from tornado.web import Application, RequestHandler

	class IndexHandler(RequestHandler):
		def get(self,*args,**kwargs):
	        self.render('index.html')
	        # self.write("<a href='/python'>python</a>")
	    def post(self,*args,**kwargs):
	        pass
	class PythonHandler(RequestHandler):
		pass
#设置端口
	define('port',type=int,default=8888)
#设置配置文件
	parse_config_file('../config/config')]
#路由
	urls = [('/',IndexHandler),\
	        ('/python',PythonHandler)
	]
#template_path和static_path
	app = Application(urls,template_path='templates',\
	    static_path='static')

	server = HTTPServer(app)
	server.listen(options.port)
	IOLoop.current().start()

2.标签
{%for xx in xxxs%}...{%end%}
{%if 条件%}...{%else%}...{%end%}

3.static_url('url')
	用法:
		{{static_url('静态资源路径')}}
		eg:src={{ static_url('image/--.jpg')}}
		同src='static/image/--.jppg'
4.块(block)的用法
	{%extends base.html%}
	{%block 名字%}
	{%end%}
5.模块(module)的使用
{%module xxx()%}
使用步骤：
１．创建一个文件夹存放模块文件．该文件夹必须建立在模板文件夹下．
２．创建模块文件．（html文件）
３．关联模板文件和模块文件．
　　　{%module xxxxx()%}
4. 进行配置．在Application中增加参数：
   ui_modules={'xxxxx':类名}
5．创建配置时对应的类，必须继承自UIModule，重写钩子方法render，该方法必须返回一个字符串，作为模板与模块的关联内容．所以这里应该返回的是模块文件转成的字符串，直接调用UIModule的render_string方法就可以完成．
注意：如果模块中有变量，表达式等内容，必须在render_string方法中对变量，表达式进行相应的赋值．
UIModule中，request属性引用着HttpServerRequest类型的对象，可以帮助我们完成一些与请求相关的操作．比如，获取请求参数．
HttpServerRequest对象的常用属性（参见pptday1 p8）：
    method HTTP的请求方式，如GET或POST;
    host 被请求的主机名；
    uri 请求的完整资源标示，包括路径和查询字符串；
    path 请求的路径部分；
    query 请求的查询字符串部分；
    version 使用的HTTP版本；
    headers 请求的协议头，是类似字典的对象，支持关键字索引的方式获取特定协议头信息，例如：request.headers[“Content-Type”]，也可以用get的方式获取指定特定协议头信息；
    body 请求体数据（二进制格式）；
    remote_ip 客户端的IP地址；
    files 用户上传的文件，为字典类型
***********************************************
1.请求参数
class IndexHandler(RequestHandler):
	def get(self,*args,**kwargs):
        self.render('index.html')
        # self.write("<a href='/python'>python</a>")
    def post(self,*args,**kwargs):
        pass
GET:
name = self.get_query_argument("name",None) #"name"
names = self.get_query_arguments("name")   #["name"]
POST:
self.get_query_arguments
self.get_query_arguments

RequestHandler中还有一个
    get_argument()
    get_arguments()
    函数使用效果就是
    get_query_argument()+get_body_argument()
    get_query_arguments()+get_body_arguments()

2.模板参数
例如：self.render('模板',a=100,b=150,myfunc=self.xxx)

3.返回设置
self.set_header("content-type","appliction/json;charset=UTF-8")
self.set_status(响应码,"状态码描述")

4.Tornado的自动转义
针对<script></script>会默认开启自动转义，防止恶意代码的执行，
关闭方法：一：Application中，autoescape=None
	二,只关闭某个页面，{% autoescape None %}
注意：Google Chrome浏览器安全机制，修改关闭set_header('X-XSS-Protection',0)

5.database
create table if not exists tb_user(
	user_id int auto_increment,
	user_name varchar(64) not null,
	user_password varchar(64) not null ,
	user_avatar varchar(256) default null,
	user_city varchar(64) not null,
	user_createdate datetime default current_timestamp,
	user_updatedate datetime default current_timestamp on update current_timestamp,
	primary key(user_id),
	unique(user_name)
)default charset=utf8;

create table if not exists tb_blog(
	blog_id int auto_increment,
	blog_user_id int not null,
	blog_title varchar(64) not null,
	blog_content varchar(2048) not null,
	blog_createdate datetime default current_timestamp,
	blog_updatedate datetime default current_timestamp on update current_timestamp,
	primary key(blog_id),
	foreign key(blog_user_id)
	references tb_user(user_id)
	on update cascade 
	on delete cascade
)default charset=utf8;

create table if not exists tb_tag(
	tag_id int auto_increment,
	tag_content varchar(16) not null,
	unique(tag_content),
	primary key(tag_id)
)default charset=utf8;

create table if not exists tb_blog_tag(
	blog_tag_id int auto_increment,
	rel_blog_id int not null,
	rel_tag_id int not null,
	primary key(blog_tag_id),
	foreign key(rel_blog_id)
	references tb_blog(blog_id)
	on update cascade
	on delete cascade,
	foreign key(rel_tag_id)
	references tb_tag(tag_id)
	on update cascade
	on delete cascade
)default charset=utf8;

6.insert
insert into tb_user(user_name,user_password,user_city) values('aa','123456','wuhan');

7.delete
delete from tb_user where user_id=xxx

8.update
update tb_user set user_name = 'xxx' where user_id=xxx

9.select user_name from tb_user where user_city='shanghai' or user_city='beijing';
select user_name from tb_user where user_city in ('shanghai','beijing');

select user_name from tb_userwhere user_createdate>'2018-01-01 17:01:01' and user_createdate>'2018-10-01 17:01:01';

select user_name,user_createdate form tb_user where createdate in (select max(user_createdate) from tb_user group by user_city);
10.内连接
(笛卡尔积)
select * from t1 inner join t2 [on 条件];
11.(左/右)外连接
select * from t1 left join t2 on t1.id=t2.t1id;
select * from t2 right join t1 on t1.id=t2.t1id;
